#!/usr/bin/env python3
"""
Pruebas de la aplicaci√≥n nativa macOS S3 Manager
Autor: Sistema de Cat√°logo de Tablas
Fecha: 2025
"""

import os
import sys
import subprocess
import time
from pathlib import Path

def test_native_app():
    """Prueba la aplicaci√≥n nativa macOS"""
    
    print("üçé PRUEBAS DE APLICACI√ìN NATIVA MACOS")
    print("=" * 60)
    
    current_dir = Path(__file__).parent
    app_path = current_dir / "build" / "S3Manager.app"
    
    # Verificar que la aplicaci√≥n existe
    print("1Ô∏è‚É£ Verificando aplicaci√≥n nativa...")
    if not app_path.exists():
        print("‚ùå Aplicaci√≥n no encontrada")
        return False
    
    print(f"‚úÖ Aplicaci√≥n encontrada: {app_path}")
    
    # Verificar estructura de la aplicaci√≥n
    print("\n2Ô∏è‚É£ Verificando estructura de la aplicaci√≥n...")
    
    required_paths = [
        app_path / "Contents",
        app_path / "Contents" / "MacOS",
        app_path / "Contents" / "Resources",
        app_path / "Contents" / "Info.plist",
        app_path / "Contents" / "MacOS" / "S3Manager"
    ]
    
    for path in required_paths:
        if path.exists():
            print(f"‚úÖ {path.name}")
        else:
            print(f"‚ùå {path.name} faltante")
            return False
    
    # Verificar permisos de ejecuci√≥n
    print("\n3Ô∏è‚É£ Verificando permisos...")
    executable = app_path / "Contents" / "MacOS" / "S3Manager"
    
    if os.access(executable, os.X_OK):
        print("‚úÖ Permisos de ejecuci√≥n correctos")
    else:
        print("‚ùå Sin permisos de ejecuci√≥n")
        return False
    
    # Verificar Info.plist
    print("\n4Ô∏è‚É£ Verificando Info.plist...")
    info_plist = app_path / "Contents" / "Info.plist"
    
    try:
        with open(info_plist, 'r') as f:
            content = f.read()
            
        required_keys = [
            "CFBundleDisplayName",
            "CFBundleExecutable", 
            "CFBundleIdentifier",
            "CFBundleName"
        ]
        
        for key in required_keys:
            if key in content:
                print(f"‚úÖ {key}")
            else:
                print(f"‚ùå {key} faltante")
                
    except Exception as e:
        print(f"‚ùå Error leyendo Info.plist: {e}")
        return False
    
    # Verificar icono
    print("\n5Ô∏è‚É£ Verificando icono...")
    icon_path = app_path / "Contents" / "Resources" / "icon.icns"
    
    if icon_path.exists():
        print("‚úÖ Icono personalizado encontrado")
    else:
        print("‚ö†Ô∏è  Icono personalizado no encontrado")
    
    # Probar lanzamiento (sin GUI)
    print("\n6Ô∏è‚É£ Probando lanzamiento...")
    
    try:
        # Intentar ejecutar con timeout
        result = subprocess.run([
            str(executable),
            "--help"
        ], capture_output=True, text=True, timeout=5)
        
        print("‚úÖ Aplicaci√≥n se puede ejecutar")
        
    except subprocess.TimeoutExpired:
        print("‚úÖ Aplicaci√≥n se ejecuta (timeout esperado)")
    except Exception as e:
        print(f"‚ö†Ô∏è  Error en lanzamiento: {e}")
    
    # Verificar dependencias incluidas
    print("\n7Ô∏è‚É£ Verificando dependencias...")
    
    frameworks_dir = app_path / "Contents" / "Frameworks"
    if frameworks_dir.exists():
        print("‚úÖ Directorio de frameworks encontrado")
        
        # Contar frameworks
        frameworks = list(frameworks_dir.glob("*.framework"))
        if frameworks:
            print(f"‚úÖ {len(frameworks)} frameworks incluidos")
        else:
            print("‚ö†Ô∏è  No se encontraron frameworks")
    else:
        print("‚ö†Ô∏è  Directorio de frameworks no encontrado")
    
    # Verificar tama√±o de la aplicaci√≥n
    print("\n8Ô∏è‚É£ Verificando tama√±o...")
    
    try:
        result = subprocess.run([
            "du", "-sh", str(app_path)
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            size = result.stdout.strip().split()[0]
            print(f"‚úÖ Tama√±o de la aplicaci√≥n: {size}")
        else:
            print("‚ö†Ô∏è  No se pudo determinar el tama√±o")
            
    except Exception as e:
        print(f"‚ö†Ô∏è  Error calculando tama√±o: {e}")
    
    print("\nüéâ PRUEBAS DE APLICACI√ìN NATIVA COMPLETADAS")
    print("‚ú® La aplicaci√≥n est√° lista para distribuci√≥n")
    
    return True

def test_launch_methods():
    """Prueba diferentes m√©todos de lanzamiento"""
    
    print("\nüöÄ PROBANDO M√âTODOS DE LANZAMIENTO")
    print("=" * 60)
    
    current_dir = Path(__file__).parent
    app_path = current_dir / "build" / "S3Manager.app"
    
    # M√©todo 1: open command
    print("1Ô∏è‚É£ Probando con comando 'open'...")
    try:
        result = subprocess.run([
            "open", str(app_path)
        ], capture_output=True, text=True, timeout=3)
        
        if result.returncode == 0:
            print("‚úÖ Lanzamiento con 'open' exitoso")
        else:
            print(f"‚ùå Error con 'open': {result.stderr}")
            
    except subprocess.TimeoutExpired:
        print("‚úÖ Lanzamiento con 'open' iniciado")
    except Exception as e:
        print(f"‚ùå Error con 'open': {e}")
    
    # M√©todo 2: Ejecutable directo
    print("\n2Ô∏è‚É£ Probando ejecutable directo...")
    executable = app_path / "Contents" / "MacOS" / "S3Manager"
    
    try:
        # Solo verificar que se puede ejecutar
        result = subprocess.run([
            str(executable)
        ], capture_output=True, text=True, timeout=2)
        
        print("‚úÖ Ejecutable directo funciona")
        
    except subprocess.TimeoutExpired:
        print("‚úÖ Ejecutable directo se ejecuta")
    except Exception as e:
        print(f"‚ö†Ô∏è  Ejecutable directo: {e}")
    
    # M√©todo 3: Script de lanzamiento
    print("\n3Ô∏è‚É£ Probando script de lanzamiento...")
    launcher_script = current_dir / "launch_s3_manager.sh"
    
    if launcher_script.exists():
        print("‚úÖ Script de lanzamiento encontrado")
        
        # Verificar permisos
        if os.access(launcher_script, os.X_OK):
            print("‚úÖ Script tiene permisos de ejecuci√≥n")
        else:
            print("‚ö†Ô∏è  Script sin permisos de ejecuci√≥n")
    else:
        print("‚ùå Script de lanzamiento no encontrado")

def main():
    """Funci√≥n principal"""
    
    # Verificar que estamos en macOS
    if sys.platform != "darwin":
        print("‚ùå Este script solo funciona en macOS")
        sys.exit(1)
    
    # Ejecutar pruebas
    success = test_native_app()
    test_launch_methods()
    
    if success:
        print("\nüéØ RESULTADO FINAL: ‚úÖ √âXITO")
        print("üì± La aplicaci√≥n nativa est√° lista para usar")
    else:
        print("\nüéØ RESULTADO FINAL: ‚ùå PROBLEMAS DETECTADOS")
        print("üîß Revisa los errores antes de usar")

if __name__ == "__main__":
    main()
